chunks = 1:20
num_ranges = 20

<module>
    <mof>
        modnamepat = ${modnamepat_tile_chunk}
        wrappername = genwrap.py
        wrapperloop = chunks
        #max_fwthreads = ${nthreads}

        <exec_1>
            <cmdline>
                nranges = ${num_ranges}
                wrange = ${chunks}
                tilename = ${tilename}
                meds_list = ${list.meds_list.fullname}
                bands = g,r,i,z
                fof-file = ${file.fof.fullname}
                psf-map = ${list.psf_list.fullname}
                nbrs-file = ${file.nbrs.fullname}
                _09_mofconf = ${file.mofconf.fullname}
                _10_mofchunk = ${file.mofchunk.fullname}
            </cmdline>
            execname = run_ngmixit
            cmd_hyphen =  mixed_gnu
            used = file.nbrs,file.fof,list.psf_list.psfmodel,file.mofconf, list.meds_list.meds
            was_generated_by = file.mofchunk
            ancestry = file.nbrs:file.mofchunk,file.fof:file.mofchunk,list.meds_list.meds:file.mofchunk
        </exec_1>
        <list>
            <psf_list>
                exec = query_coadd_for_mof.py
                args = --tile ${tilename} --se_proctag ${se_proctag} --me_proctag ${proctag} -s ${submit_des_db_section} -S prod -v 3 -o ${qoutfile} --psfmodel
                columns = psfmodel.expnum, psfmodel.ccdnum, psfmodel.fullname
                filepat = tile_generic
                flabel = psf
                fsuffix = list
                dirpat = mepoch
                rundir = list/mof
                ops_enddir = list/mof
            </psf_list>
        </list>
        <list>
            <meds_list>
                # how to get list data
                depends query-coadd-for-mof.list.meds_list

                # how to create lists
                columns = meds.fullname, band
                sortkey = fullname

                # what to name the list
                filepat = tile_generic
                flabel = meds-mof
                fsuffix = list

                # where to put it (jobroot=rundir, archive=ops_enddir)
                dirpat = mepoch
                ops_enddir = list/mof
                rundir = list/mof
            </meds_list>
        </list>
        <file>
            <meds>
                listonly = True

                # where input file lives in jobroot
                dirpat = mepoch
                rundir = meds
            </meds>
             <mofconf>
                # what input file is named
                filename = run-Y3A1dev-v4-mof.yaml
                filetype = config

                # where input file lives in jobroot
                dirpat = mepoch
                rundir = config
             </mofconf>
             <nbrs>
                depends query-coadd-for-mof.file.nbrs
                filetype = coadd_mof_nbrs
                filepat = tile_generic

                # where to put it (jobroot=rundir, archive=ops_enddir)
                dirpat = mepoch
                rundir = mof
             </nbrs>
             <fof>
                depends query-coadd-for-mof.file.fof
                # what metadata to save
                filetype = coadd_mof_fof
                filepat = tile_generic

                # where to put it (jobroot=rundir, archive=ops_enddir)
                dirpat = mepoch
                rundir = mof
             </fof>
             <psfmodel>
                filetype = psfex_model
                listonly = true
               
                dirpat = se
                rundir = psf 
            </psfmodel>

            ### output files

             <mofchunk>
                filetype = coadd_mof_chunk

                # how to name output file
                filepat = tile_generic
                flabel = mof-chunk-${chunks:02}
                fsuffix = fits
                match = chunks

                # where to put it (jobroot=rundir, archive=ops_enddir)
                dirpat = mepoch
                ops_enddir = mof
                rundir = mof
            </mofchunk>
        </file>
    </mof>
</module>
